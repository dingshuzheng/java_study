关键字（Keyword）和保留字（Reserved Word）
	关键字：
			定义：被java赋予了特殊含义，用作专门用途的字符串。
			特点：所有关键字都是小写
	保留字：
			现有java版本尚未使用，但以后版本可能会作为关键字使用
			例如：goto，const


			
标识符（Identifier）
		java对各种变量，方法和类等要素命名时使用的字符序列称为标识符
		命名规则：
				由26个英文字母大小写，0-9，_或$组成
				数字不可以开头
				不可以使用关键字和保留字，但能包含关键字和保留字
				java中严格区分大小写，长度无限制
				标识符中不能包含空格
				
		命名规范： ---> 不遵守，编译也可以通过
				包名：多单词组成时所有字母小写
				类名、接口名：多单词组成时，每个单词的首字母大写
				变量名、方法名：多单词组成时，第一个单词的首字母小写，第二个单词开始每个首字母大写
				常量名：所有字母都大写。多单词组成时每个单词用下划线连接


		
变量：
	概念：
		内存中的一个存储区域，是程序中最基础的存储单元，包含变量类型、变量名、存储的值
		
Java变量：
		基本数据类型：byte short int long
					  char 
					  float double
					  boolean
		引用数据类型：类、接口、数组
		
		详细说明：
		1. 整型：byte(1字节=8bit) 、 short(2字节) 、 int(4字节) 、 long(8字节)
			①byte范围： -128 ~ 127
			②声明long型变量时，必须以“l”或“L”结尾
			③通常选择int来定义整型变量
		2. 浮点型：float(4字节)、double(8字节)
			①浮点型：表示带小数点的数值
			②float表示的数值范围比long还大
			③定义float变量时，变量要以“f”或“F”结尾
			④通常选择double来定义浮点型变量
		3. 字符型：char（1字符=2个字节）
			①定义char型变量，通常使用一对''，内部只能写一个字符
			②表示方式：1. 声明一个字符 2. 转义字符 3. 直接使用unicode值来表示字符型常量
		4. 布尔型：boolean
			①只能取两个值之一：true、false
			②常常在条件判断、循环结构中使用
		
		基本数据类型提升：byte,short,char -> int -> long -> float -> double 
		
		基本数据类型的强转可能会导致精度的损失
		
		String类型变量的使用
			1. String属于引用型数据类型（不是基本数据类型！）
			2. 声明String类型变量时，使用一对“”
			3. String可以和8种基本数据类型做运算，且运算只能是连接运算：+
			4. String和8种数据类型运算后仍是String类型
		

		
计算机中的不同进制使用说明：

对于整数，有四种表示方式：
	二进制（binary）：0，1 ，满2进1，以0b或0B开头
	十进制（decimal）：0-9 ，满10进1
	八进制（octal）：0-7 ，满8进1，以0开头
	十六进制（hex）：0-9，及A-F ，满16进1，以0x或0X开头，此处的A-F不区分大小写



运算符：
	运算符之一：算术运算符
		+ - + - * / % (前)++ (后)++ (前)-- (后)-- +
		特别说明：连接符：+ 只用于String和其他数据类型变量（包括String）之间
		
	运算符之二：赋值运算符
		= += -= *= /= %=
		特别说明：+= 等运算的结果不会改变数据的类型 （开发中推荐）
		
	运算符之三：比较运算符
		== != > < >= <= instanceof
		结论：
		1. 比较运算符的结果是boolean类型
		2. 区分 == 和 =
		3. > < >= <= ：只能使用在数值类型的数据之间
		4. == != ：不仅可以使用在数据类型之间，还可以使用在其他引用变量之间
		
	运算符之四：逻辑运算符
		& && | || ! ^
		特别说明：
		1. 逻辑运算符操作的都是boolean类型的变量，而且结果也是布尔型的
		
	运算符之五：位运算符（了解）
		结论：
		1. 位运算符操作的都是整型的数据
		2.  << ：在一定的范围内，每向左移一位，相当于*2
			>> ：在一定的范围内，每向右移一位，相当于/2
		面试题：
		最高效的方式计算2 * 8 ?  2 << 3 或 8 << 1
		
	运算符之六：三元运算符
		1. 结构：（条件表达式）? 表达式一 ：表达式二
		2. 说明：
		① 条件表达式的结果为boolean类型
		② 根据条件表达式真或假，决定执行表达式一还是二
		  如果表达式为true，则执行表达式一
		  如果表达式为false，则执行表达式二
		③ 表达式1 和表达式2要求是一致的（说白了就是能用统一的类型去接收）
		④ 三元运算符是可以嵌套使用的
		3. 凡是可以使用三元运算符的地方都可以改写成if-else
		   但反之不成立
		4. 如果程序既可以使用三元运算符又可以使用if-else结构，那么优先选择三元运算符。原因：简洁，执行效率高
		


		
程序流程控制：
	顺序结构
	
	分支结构
		分支结构中的if-else（条件判断结构）
			三种结构
			第一种：
				if（条件表达式）{
				}

			第二种：二选一
				if（条件表达式）{
					执行表达式一
				}else{
					执行表达式二
				}

			第三种（多选一）
				if（条件表达式）{
					执行表达式一
				}else if（条件表达式）{
					执行表达式二
				}
				...
				else{
					执行表达式n
				}
				
		分支结构二：switch-case
			1. 格式
				switch（表达式）{
					case 常量1；
					执行语句1；
					//break；
					
					case 常量2：
					执行语句2；
					//break；
					
					...
					
					default:
					执行语句n；
					//break;
				}
			2. 说明：
				① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。
				  当调用完执行语句之后，则仍然继续向下执行其他case结构中的执行语句，知道遇到break关键字或此switch-case结构末尾结束为止
				② break关键字可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构
				③ switch-case中的表达式，只能是以下的6中类型之一：byte,short,char,int,枚举类型（JDK5.0新增）,String(JDK7.0新增)
				④ case之后只能声明常量，不能声明范围
				⑤ break关键字是可选的
				⑥ default相当于if-else中的else
				⑦ default结构是可选的而且位置是灵活的	
	
	循环结构	
	
		循环结构的4个要素
				1 初始化结构
				2 循环结构 --> 是boolean类型
				3 循环体
				4 迭代条件
		
		循环结构：for，while，do-while
			for：	
				for(1;2;4){
					3
				}
				执行过程：1 > 2 > 3 > 4 > 2 > 3 > 4 > ... > 2
			
			while：
				1
				while（2）{
					3；
					4；
				}
				执行过程：1 > 2 > 3 > 4 > 2 > 3 >4 > ... > 2
			
		总结：1.实际开发中，我们基本上会在for、while中进行选择，实现循环结构
			  2. for、while循环是可以相互转化的
		
			do-while：
				1
				do{
					3;
					4;
					}while(2);
				执行过程：1 > 3 > 4 > 2 > 3 > 4 > 2 > ... > 2
				
		无限循环：while(true) or for(;;)
		
		结束循环：1.当循环条件是false
				  2.当循环体中遇到break（注意，遇到return也会结束循环，但它是结束方法顺便结束循环，故不在此讨论）
		
		嵌套循环

Scanner类的调用方法：
		具体实现步骤：
		1. 导包：import java.util.Scanner
		2. Scanner的实体化Scanner scan = new Scanner(System.in)
		3. 调用scanner类的相关方法(next()/nextxxx()),来获取指定类型的变量

		注意：
		需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常：InputMismatchException
		导致程序终止
		
package, import:
    java.lang下的类在使用时无需导包（例：Math, String）
    如果写的是类的全限定名，则也可以不用导包，如: java.util.Scanner

jar: java -jar xxx.jar 可以运行jar包
		
补充：衡量一个功能代码的优劣
	1. 正确性
	2. 可读性
	3. 健壮性
	4. 高效率与低存储：时间复杂度和空间复杂度